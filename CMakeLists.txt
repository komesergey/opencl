cmake_minimum_required(VERSION 3.10)
project(opencl)

add_executable(opencl main.cpp)
add_executable(devices devices.cpp)

if(DEFINED ENV{CUDA_PATH})
    message("CUDA: " $ENV{CUDA_PATH})
    add_executable(cuda cuda.cpp)
    include_directories("$ENV{CUDA_PATH}/include")
    target_link_libraries(cuda $ENV{CUDA_PATH}/lib/x64/cuda.lib)
    target_link_libraries(cuda $ENV{CUDA_PATH}/lib/x64/nvrtc.lib)
endif()

if(APPLE)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -framework OpenCL -march=native")
    add_executable(intel intel.cpp)
elseif(MSVC)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /std:c++14 /arch:AVX2")
else()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
endif()

if(MSVC OR MSYS OR MINGW OR WIN32)
    if(DEFINED ENV{CUDA_PATH})
        message(STATUS "CUDA_PATH environment variable defined")
        include_directories("$ENV{CUDA_PATH}/include")
        target_link_libraries(opencl $ENV{CUDA_PATH}/lib/x64/OpenCL.lib)
        target_link_libraries(devices $ENV{CUDA_PATH}/lib/x64/OpenCL.lib)
    endif()
    if(DEFINED ENV{INTELOCLSDKROOT})
        message(STATUS "INTELOCLSDKROOT environment variable defined as $ENV{INTELOCLSDKROOT}")
        include_directories("$ENV{INTELOCLSDKROOT}/include")
        target_link_libraries(opencl $ENV{INTELOCLSDKROOT}/lib/x64/OpenCL.lib)
        target_link_libraries(devices $ENV{INTELOCLSDKROOT}/lib/x64/OpenCL.lib)
    endif()
endif()